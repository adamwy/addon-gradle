allprojects {
    task forgeOutput << {
        def indentLevel = 0
        def outputFile = new File("$projectDir.path/forge-output.xml").newPrintWriter()
        def indent = {
            indentLevel.times {
                outputFile.print '    '
            }
        }
        def output = {
            indent()
            outputFile.println it
        }
        def outputInc = {
            output it
            indentLevel++
        }
        def outputDec = {
            indentLevel--
            output it
        }
        def outputRelative = { file, to ->
            output file.absolutePath.substring(to.absolutePath.length() + 1).replace("\\", "/")
        }
        def outputDependency = { configName, d ->
            outputInc '<dependency>'
            outputInc '<name>'
            output d.name
            outputDec '</name>'
            outputInc '<group>'
            output d.group
            outputDec '</group>'
            outputInc '<version>'
            output d.version
            outputDec '</version>'
            if (d instanceof ModuleDependency) {
                outputInc '<artifacts>'
                d.artifacts.each {
                    outputInc '<artifact>'
                    outputInc '<classifier>'
                    output it.classifier != null ? it.classifier : ''
                    outputDec '</classifier>'
                    outputInc '<type>'
                    output it.type
                    outputDec '</type>'
                    outputDec '</artifact>'
                }
                outputDec '</artifacts>'
                outputInc '<excludeRules>'
                d.excludeRules.each {
                    outputInc '<excludeRule>'
                    outputInc '<group>'
                    output it.group != null ? it.group : d.group
                    outputDec'</group>'
                    outputInc '<module>'
                    output it.module
                    outputDec '</module>'
                    outputDec '</excludeRule>'
                }
                outputDec '</excludeRules>'
            }
            outputInc '<configuration>'
            output configName
            outputDec '</configuration>'
            outputDec '</dependency>'
        }
        def outputProject = { p ->
            outputInc '<project>'
            outputInc '<group>'
            output p.group
            outputDec '</group>'
            outputInc '<name>'
            output p.name
            outputDec '</name>'
            outputInc '<version>'
            output p.version
            outputDec '</version>'
            outputInc '<projectPath>'
            output p.path
            outputDec '</projectPath>'
            outputInc '<rootProjectDirectory>'
            output p.rootProject.projectDir
            outputDec '</rootProjectDirectory>'
            def _assembleArchiveTask
            if (p.tasks.findByPath('assemble') != null) {
                assemble.taskDependencies.getDependencies(assemble).each {
                    if (it.hasProperty('archiveName')) {
                        _assembleArchiveTask = it
                    }
                }
            }
            outputInc '<packaging>'
            output _assembleArchiveTask != null ? _assembleArchiveTask.name : ''
            outputDec '</packaging>'
            outputInc '<archivePath>'
            output _assembleArchiveTask != null ?
                "$buildDir.name/$libsDirName/$_assembleArchiveTask.archiveName"
            : ''
            outputDec '</archivePath>'
            outputInc '<sourceCompatibility>'
            output p.sourceCompatibility
            outputDec '</sourceCompatibility>'
            outputInc '<targetCompatibility>'
            output p.targetCompatibility
            outputDec '</targetCompatibility>'
            outputInc '<properties>'
            project.ext.properties.each { key, value ->
                if (key instanceof String && value instanceof String) {
                    outputInc '<property>'
                    outputInc '<key>'
                    output key
                    outputDec '</key>'
                    outputInc '<value>'
                    output value
                    outputDec '</value>'
                    outputDec '</property>'
                }
            }
            outputDec '</properties>'
            outputInc '<tasks>'
            p.tasks.each { t ->
                outputInc '<task>'
                outputInc '<name>'
                output t.name
                outputDec '</name>'
                outputInc '<dependsOn>'
                t.taskDependencies.getDependencies(t).each {
                    outputInc '<task>'
                    output it.name
                    outputDec '</task>'
                }
                outputDec '</dependsOn>'
                outputDec '</task>'
            }
            outputDec '</tasks>'
            outputInc '<dependencies>'
            p.configurations.each { c ->
                c.allDependencies.each { d ->
                    outputDependency(c.name, d)
                }
            }
            outputDec '</dependencies>'
            outputInc '<managedDependencies>'
            if (p.ext.has('_managedDependencies')) {
                p.ext._managedDependencies.each { groupName, configVersion ->
                    def _notation = [
                            group: groupName.group,
                            name: groupName.name,
                            version: configVersion.version,
                            classifier: configVersion.classifier,
                            ext: configVersion.ext
                    ]
                    def d
                    if (configVersion.closure != null) {
                        d = p.dependencies.create(_notation, configVersion.closure)
                    } else {
                        d = p.dependencies.create(_notation)
                    }
                    outputDependency(configVersion.configuration, d)
                }
            }
            outputDec '</managedDependencies>'
            outputInc '<repositories>'
            p.repositories.each { r ->
                outputInc '<repository>'
                outputInc '<name>'
                output r.name
                outputDec '</name>'
                outputInc '<url>'
                output r.url
                outputDec '</url>'
                outputDec '</repository>'
            }
            outputDec '</repositories>'
            outputInc '<plugins>'
            p.plugins.each { plugin ->
                outputInc '<plugin>'
                outputInc '<class>'
                output plugin.class.name
                outputDec '</class>'
                outputDec '</plugin>'
            }
            outputDec '</plugins>'
            outputInc '<sourceSets>'
            if (p.hasProperty('sourceSets')) {
                p.sourceSets.each { set ->
                    outputInc '<sourceSet>'
                    outputInc '<name>'
                    output set.name
                    outputDec '</name>'
                    outputInc '<java>'
                    set.java.srcDirs.each {
                        outputInc '<directory>'
                        outputRelative(it, project.projectDir)
                        outputDec '</directory>'
                    }
                    outputDec '</java>'
                    outputInc '<resources>'
                    set.resources.srcDirs.each {
                        outputInc '<directory>'
                        outputRelative(it, project.projectDir)
                        outputDec '</directory>'
                    }
                    outputDec '</resources>'
                    outputDec '</sourceSet>'
                }
            }
            outputDec '</sourceSets>'
            outputDec '</project>'
        }
    
        outputInc '<forgeOutput>'
        outputProject project
        outputDec '</forgeOutput>'
    
        outputFile.close()
    }
}